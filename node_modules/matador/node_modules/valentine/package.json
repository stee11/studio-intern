{
  "name": "valentine",
  "description": "JavaScripts Functional Sister. Utilitiy, Iterators, type checking",
  "version": "1.5.5",
  "homepage": "https://github.com/ded/valentine",
  "author": {
    "name": "Dustin Diaz",
    "email": "dustin@dustindiaz.com",
    "url": "http://dustindiaz.com"
  },
  "keywords": [
    "ender",
    "functional",
    "iteration",
    "type checking",
    "base"
  ],
  "main": "./valentine.js",
  "ender": "./src/ender.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/ded/valentine.git"
  },
  "devDependencies": {
    "sink-test": ">= 1.0.1"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "    \\  / _. |  _  ._ _|_ o ._   _\n     \\/ (_| | (/_ | | |_ | | | (/_\n\n[![Build Status](https://secure.travis-ci.org/ded/valentine.png)](http://travis-ci.org/ded/valentine)\nJavaScript's Sister, and protector — inspired by Underscore; Valentine provides you with type checking, functional iterators, and common utility helpers such as waterfalls, queues, and parallels; all utilizing native JavaScript methods (when available) for optimal speed.\n\nBrowser usage:\n\n``` html\n<script src=\"valentine.js\"></script>\n<script>\n  v.forEach(['a', 'b', 'c'], function (letter) {\n\n  })\n</script>\n```\n\nNode users, install it:\n\n    $ npm install valentine\n\nUse it:\n\n``` js\nvar v = require('valentine')\n\n// showcase object style\nv(['a', 'b', 'c']).map(function (letter) {\n  return letter.toUpperCase()\n}).join(' '); // => 'A B C'\n```\n\nAPI\n---\n\n<h3>iterators</h3>\n\n  * v.each(ar || obj, callback[, scope])\n  * v.map(ar || obj, callback[, scope])\n  * v.every(ar, callback[, scope])\n  * v.some(ar, callback[, scope])\n  * v.filter(ar, callback[, scope])\n  * v.reject(ar, callback[, scope])\n  * v.indexOf(ar, item[, start])\n  * v.lastIndexOf(ar, item[, start])\n  * v.reduce(ar, callback, memo[, scope])\n  * v.reduceRight(ar, callback, memo[, scope])\n\n<h3>utility</h3>\n\n  * v.extend(obj[, obj2[, obj3[...]]])\n  * v.merge(ar1, ar2)\n  * v.pluck(ar, key)\n  * v.toArray(sparse)\n  * v.size(ar)\n  * v.find(ar, key)\n  * v.compact(ar)\n  * v.flatten(ar)\n  * v.uniq(ar)\n  * v.first(ar)\n  * v.last(ar)\n  * v.keys(obj)\n  * v.values(obj)\n  * v.trim(str)\n  * v.bind(scope, fn, [curried args])\n  * v.curry(fn, [curried args])\n  * v.inArray(ar, needle)\n  * v.parallel([fn args])\n\n``` js\nv.parallel(\n  function (fn) {\n    getTimeline(function (e, timeline) {\n      fn(e, timeline)\n    })\n  }\n, function (fn) {\n    getUser(function (e, user) {\n      fn(e, user)\n    })\n  }\n, function (e, timeline, user) {\n    if (e) return console.log(e)\n    ok(timeline == 'one', 'first result is \"one\"')\n    ok(user == 'two', 'second result is \"two\"')\n  }\n)\n```\n\n  * v.waterfall([fn args])\n\n``` js\nv.waterfall(\n  function (callback) {\n    callback(null, 'one', 'two')\n  }\n, function (a, b, callback) {\n    console.log(a == 'one')\n    console.log(b == 'two')\n    callback(null, 'three')\n  }\n, function (c, callback) {\n    console.log(c == 'three')\n    callback(null, 'final result')\n  }\n, function (err, result) {\n    console.log(!!err == false)\n    console.log(result == 'final result')\n  }\n)\n```\n\n  * v.waterfall([fn1, fn2<, fn3>], callback)\n  * v.queue([fn args])\n\n``` js\nvar it = v.queue(\n  function () {\n    console.log('one')\n    it.next()\n  }\n, function () {\n    console.log('two')\n    it.next()\n  }\n, function () {\n    console.log('three')\n  }\n)\nit.next()\n```\n\n<h3>type checking</h3>\n\n  * v.is.fun(o)\n  * v.is.str(o)\n  * v.is.ele(o)\n  * v.is.arr(o)\n  * v.is.arrLike(o)\n  * v.is.num(o)\n  * v.is.bool(o)\n  * v.is.args(o)\n  * v.is.emp(o)\n  * v.is.dat(o)\n  * v.is.nan(o)\n  * v.is.nil(o)\n  * v.is.und(o)\n  * v.is.obj(o)\n\nObject Style\n------\n\n``` js\nv(['a', 'b', 'c']).map(function (letter) {\n  return letter.toUpperCase()\n}); // => ['A', 'B', 'C']\n```\n\nChains\n------\n\n``` js\nv(['a', 'b', [['c']], 0, false,,,null,['a', 'b', 'c']])\n  .chain().flatten().compact().uniq().map(function (letter) {\n    return letter.toUpperCase()\n  }).value(); // => ['A', 'B', 'C']\n```\n\nEnder Support\n-------------\nDon't have [Ender](http://ender.no.de)? Install it, and don't ever look back.\n\n    $ [sudo] npm install ender -g\n\nThen build valentine into your package\n\n    $ ender build valentine\n\nHave an existing Ender package? Include it:\n\n    $ ender add valentine\n\nWrite code like a boss\n\n``` js\n\n// as a top level method\n$.v(['a', ['virus'], 'b', 'c']).reject(function (el, i) {\n  return $.is.arr(el[i])\n})\n\n// top level methods in bridge\n$.each\n  map\n  merge\n  extend\n  toArray\n  keys\n  values\n  trim\n  bind\n  curry\n  parallel\n  waterfall\n  inArray\n  queue\n```\n\nOr just require the valentine module\n\n``` js\n!function (v) {\n  v(['a', ['virus'], 'b', 'c']).reject(function (el, i) {\n    return v.is.arr(el[i])\n  })\n}(require('valentine'))\n```\n\n## Developers\nCare to contribute? Make your edits to `src/valentine.js` and get your environment up and running\n\n    $ npm install -d\n    $ make\n    $ make test\n    $ open tests/index.html\n\n*Happy iterating*!\n",
  "readmeFilename": "README.md",
  "_id": "valentine@1.5.5",
  "_from": "valentine@*"
}
