{
  "name": "klass",
  "description": "Class provider with classical inheritance interface",
  "version": "1.2.3",
  "homepage": "http://dustindiaz.com/klass",
  "author": {
    "name": "Dustin Diaz",
    "email": "polvero@gmail.com",
    "url": "http://dustindiaz.com"
  },
  "contributors": [
    {
      "name": "Jacob Thornton",
      "email": "jacob@twitter.com",
      "url": "https://github.com/fat"
    }
  ],
  "main": "./klass.js",
  "ender": "./src/ender.js",
  "keywords": [
    "ender",
    "class",
    "prototype",
    "inheritance",
    "oop"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/ded/klass.git"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "devDependencies": {
    "sink-test": ">= 0.0.8"
  },
  "readme": "Klass\n--------\nAn expressive, cross platform JavaScript Class provider with a classical interface to prototypal inheritance.\n\nAPI\n---------\n<h3>creating a Class...</h3>\n\n``` js\nvar Person = klass(function (name) {\n  this.name = name\n})\n  .statics({\n    head: ':)',\n    feet: '_|_'\n  })\n  .methods({\n    walk: function () {}\n  })\n```\n\n<h3>Subclassing...</h3>\n\n``` js\nvar SuperHuman = Person.extend(function (name) {\n  // super class is automagically called\n})\n  .methods({\n    walk: function() {\n      this.supr()\n      this.fly()\n    },\n\n    fly: function() {}\n\n  })\n\nnew SuperHuman('Zelda').walk()\n```\n\n<h3>Object Literals...</h3>\n\n``` js\nvar Foo = klass({\n  foo: 0,\n  initialize: function() {\n    this.foo = 1\n  },\n  getFoo: function () {\n    return this.foo\n  },\n  setFoo: function (x) {\n    this.foo = x\n    return this.getFoo()\n  }\n})\n```\n\n*note: initialize will be called on class invocation*\n\n<h3>Implementing...</h3>\n\nbecause sometimes you want to overwrite OR mixin an instance method\n\n``` js\n// note you can optionally pass an object literal to extend too ;)\nvar Alien = SuperHuman.extend({\n  beam: function() {\n    this.supr()\n    // beam into space\n  }\n})\n\nvar Spazoid = new Alien('Zoopo')\n\nif (beamIsDown) {\n  Spazoid.implement({\n    beam: function() {\n      this.supr()\n      // fallback to jets\n      this.jets()\n    }\n  })\n}\n```\n\nEnvironments\n------------\nKlass is [Common JS](http://commonjs.org) compliant and provides the [Modules 1.1](http://wiki.commonjs.org/wiki/Modules/1.1) interface to allow two flavors of development. See the implementations below:\n\n<h3>browser environment</h3>\n\n``` html\n<script src=\"path/to/klass.js\"></script>\n<!-- klass() is exposed to context -->\n\n<script type=\"text/javascript\">\n  var Foo = klass(fn1)\n  var Bar = Foo.extend(fn2)\n  Bar.implement({ ... })\n</script>\n``` html\n\n<h3>as a module</h3>\n\n``` js\n// your-application.js\nvar klass = require('path/to/klass')\n\nvar Foo = klass(...)\n```\n\nInstall the Package!\n--------------------\nBy far the easiest way to get started with klass is to simply install the package and hit the ground running!!\n\n    $ npm install klass\n\n    // in your Node application\n    var klass = require('klass')\n\nEnder compatibility\n-------------\nadd `klass` to your ender compilation\n\n    $ ender add klass\n\nUse it:\n\n``` js\n$.klass(...)\n```\n\nDevelopers\n----------\n\n    $ npm install --dev\n    $ make\n    $ make test\n\nKeep your edits localized to `src/klass.js`\n\nContributors\n------------\n  * [Dustin Diaz](https://github.com/ded/klass/commits/master?author=ded)\n  * [Jacob Thornton](https://github.com/ded/klass/commits/master?author=fat)\n",
  "readmeFilename": "README.md",
  "_id": "klass@1.2.3",
  "_from": "klass@*"
}
